export const posts: any = [
    {
        articleType: 'about',
        postId: '플랫폼개발운영',
        title: '빅데이터 분석 플랫폼 개발/운영',
        cover: '',
        contents: `

## 1. [빅데이터 분석 플랫폼 TEXTOM](https://textom.co.kr/about/overview) 개발


![텍스톰파이프라인](/images/textom_pipeline.png)

- 방대하고 복잡한 텍스트 자료를 분석할 수 있는 빅데이터 분석 솔루션

- 웹을 통해 데이터의 수집부터 정제, 매트릭스, 감성분석, 시각화 결과물까지 데이터를 간편하게 처리할 수 있는 서비스

- **역할/성과**

    - S/W 구조 개선, S/W 품질 개선

    - MSA 도입, 수집/분산 네트워크 설계 및 구현

## 2. [AI 학습 플랫폼 AI Edutom](https://aiedutom.co.kr) 개발

![AI에듀톰파이프라인](/images/aiedutom_pipeline.png)

- 학생들에게 재미있는 콘텐츠를 통해 AI를 어떻게 활용할 수 있는지 알려주는 단계적 플랫폼

- 수학, 코딩, 통계에 대한 지식 없이 체계적으로 AI의 원리를 이해하고 나만의 인공지능을 만들 수 있음

- **역할/성과**

    - 신규 서비스 개발, S/W 고도화 및 품질 개선

    - 로드밸런싱, 분산처리를 통한 병목 해결, 동시 수용 인원 증가

    `
    },

    {
        articleType: 'about',
        postId: 'HES',
        title: `물류 자동화 및 효율화를 위한 프로젝트`,
        cover: '',
        contents: `
## 1. 한화 ESG 스마트팩토리(Hanwha ESG Smartfactory)

- 한화 ESG 스마트팩토리(Hanwha ESG Smartfactory)의 약자로 ESG 기능을 제공하는 스마트팩토리 솔루션

- MES, MCS 등의 운영 시스템을 통합해 공장의 생산성 및 효율성을 높이는 것이 목적

- 제조 현장에 필요한 공통 핵심 기능들을 모듈화하여 고객이 요구하는 SW를 고품질로 빠르게 구축할 수 있음

- No-Code 방식으로 공통 기능에 대한 핵심 기능을 손쉽게 개발할 수 있음

- 표준화된 플랫폼을 사용해 개발 일정을 단축할 수 있으며, 관리가 편하고 유사 프로젝트의 설정 파일을 그대로 사용 가능

- 관련글1: [[내일DO한화] SW 개발의 혁신, HES(Hanwha ESG Smartfactory)](https://blog.naver.com/hanwha_official/223325374273)

- 관련글2: [[한華를 빛낸 한화인] ㈜한화 모멘텀에서 혁신을 담당하는 한화인들을 소개합니다!](https://blog.naver.com/hanwha_official/223180277142)

        {/* https://blog.naver.com/hanwha_official/223325374273 */}
{/* https://blog.naver.com/hanwha_official/223180277142 */}
{/* SDS, 이차전지, 타이어, HES */}

## 2. (주)하림산업 온라인 물류센터 적치 죄적화

## 3. AI 기반 퍼니스 장비 온도 추천 시스템

`
    },

    {
        articleType: 'about',
        postId: 'WPF',
        title: 'WPF(Windows Presentation Foundation)',
        cover: '',
        contents: `
        
## 개요
- 마이크로소프트가 개발한 데스크톱 애플리케이션 개발 프레임워크로 .NET 기술 스택의 일부

- 풍부한 UI 구현을 위해 디자인과 코드의 분리를 목표로 하며, 사용자 경험(UX)을 강화하는 데 중점을 둠


## 특징

### 1. XAML 기반 선언적 프로그래밍
- UI를 정의하기 위해 **XAML(Extensible Application Markup Language)**을 사용

- XAML은 XML 기반의 언어로, UI 요소를 선언적으로 작성할 수 있어 디자인과 로직을 분리

### 2. MVVM 패턴 지원
- **MVVM(Model-View-ViewModel)** 디자인 패턴을 권장하여 UI(View)와 비즈니스 로직(ViewModel)을 분리

- 이를 통해 코드 유지보수성과 재사용성이 높아짐

### 3. 벡터 그래픽 지원
- WPF는 벡터 기반의 그래픽 엔진을 사용하여 화면 크기에 관계없이 고품질 그래픽을 제공

- 2D, 3D 그래픽, 애니메이션, 비디오 등 다양한 멀티미디어를 지원

### 4. 강력한 데이터 바인딩
- 데이터 바인딩을 통해 UI 요소와 데이터 소스를 연결

- 이를 통해 동적 UI 업데이트 및 코드 간소화를 제공

### 5. 스타일 및 템플릿 시스템
- 스타일과 컨트롤 템플릿을 통해 UI의 외관을 쉽게 커스터마이징할 수 있음

- ResourceDictionary를 활용해 UI 디자인을 재사용할 수 있음
        
`
    },

    {
        articleType: 'about',
        postId: '학위논문',
        title: "AI/ML 데이터 분석 플랫폼 연구",
        cover: '',
        contents: `

## 1. 개요

- 복잡하게 구성된 HTML 문서에서 유의미한 콘텐츠 추출을 자동화하는 방법을 연구하였음 

- 웹 크롤링으로 수집한 HTML문서에 나타나는 태그 경로의 패턴을 이용하여 데이터셋을 만듦

- 태그 경로 패턴을 학습한 AI/ML 모델을 이용하여 새롭게 수집한 HTML문서에서 콘텐츠를 추출

- Decision Tree, Random Forest, XGBoost, RNN, LSTM 등 다양한 AI/ML모델의 성능 비교 실험 수행

- 웹 크롤링을 통해 HTML문서를 수집부터 콘텐츠 추출에 이르는 파이프라인을 시스템으로 구현하였음

![페이퍼_아키텍처](/images/paper_arc.png)

## 2. 논문
### 1) [빈도 분석을 이용한 HTML 텍스트 추출(2021, 한국정보통신학회)](https://scienceon.kisti.re.kr/commons/util/originalView.do?cn=JAKO202128640518155&dbt=JAKO&koi=KISTI1.1003%2FJNL.JAKO202128640518155)

- HTML태그와 스타일 속성을 명시하지 않고 웹 페이지에서 출현하는 텍스트의 빈도를 이용하여 본문을 추출하는 방법을 제안

- 수집된 모든 웹 페이지의 DOM 트리에서 텍스트를 추출하여 텍스트의 출현 빈도를 분석한 후, 출현 빈도가 높은 텍스트를 제외시킴으로써 본문을 추출하였으며, 본 연구에서 제안한 방법과 기존 방법의 정확도 비교를 통해서 본 연구에서 제안한 방법의 우수성을 검증하였음

### 2) [태그 경로 및 텍스트 출현 빈도를 이용한 HTML 본문 추출(2021, 한국정보통신학회)](https://scienceon.kisti.re.kr/commons/util/originalView.do?cn=JAKO202102661348107&oCn=JAKO202102661348107&dbt=JAKO&journal=NJOU00431883)

- 웹 페이지 구성에 따른 성능편차가 크다는 1의 연구의 한계를 보완하기 위해 텍스트의 출현 빈도뿐만 아니라 웹 페이지의 DOM 트리로부터 추출된 텍스트 노드의 부모 태그 경로를 분석하여 다양한 수집 채널에서 높은 정확도로 본문을 추출하는 방법을 제안하였음

### 3) [WCTT: HTML 문서 정형화 기반 웹 크롤링 시스템(2022, 한국정보통신학회)](https://scienceon.kisti.re.kr/commons/util/originalView.do?cn=JAKO202212462666743&dbt=JAKO&koi=KISTI1.1003%2FJNL.JAKO202212462666743)

- 2의 방법으로 HTML 문서를 정형화하여 하나의 수집 로직으로 본문을 수집하는 웹 크롤링 시스템인 WCTT(Web Crawling system based on Tag path and Text appearance frequency)를 설계 및 구현하였음

- WCTT는 모든 수집 채널에서 동일한 로직으로 본문을 수집하므로 유지 관리 및 수집 채널의 확장이 용이하며, 키워드 네트워크 분석 등을 위해 불용어를 제거하고 명사만 추출하는 전처리 기능도 제공

![-](/images/wctt.png)

### 4) [태그 경로 및 텍스트 출현 빈도 기반 웹 크롤링 시스템(2022, 학위논문)](https://www.riss.kr/search/detail/DetailView.do?p_mat_type=be54d9b8bc7cdb09&control_no=42dd4ee97ddd35eaffe0bdc3ef48d419&keyword=%ED%83%9C%EA%B7%B8%20%EA%B2%BD%EB%A1%9C)

- 1~3을 통합한 학위논문으로, 투고 논문의 지면 한계로 적을 수 없었던 상세한 설명과 사회연결망 분석 등의 네트워크 분석에서의 활용 가능성을 서술하였음

- <a href="https://github.com/cerulean85/wctt" target="_blank">Github Repository</a>
        
`
    },
        
    {
        articleType: 'about',
        postId: '분산처리',
        title: `분산 처리 연구 및 적용`,
        cover: '',
        contents: `
        
## 1. AS-IS 구조 개선

- 특정 사용자 요청을 모두 처리 후 다음 사용자 요청 처리하는 AS-IS 구조 문제 해결

![-](/images/textom_arc_better.png)

- 사용자3은 사용자1, 2의 모든 요청 처리를 대기해야 함

- 사용자 요청을 무작위로 처리하도록 Master/Worker 구조 도입

![-](/images/textom_arc_better2.png)

- 매니저서버가 작업을 총괄/제어함으로써 사용자 요청 처리 병렬화 

## 2. MSA 도입 및 컨테이너화

- 모놀리식 시스템 을해체하고시스템재설계, MSA 도입

- gRPC 통신, Apache Kafak 등의 메시지 브로커 적용

- 용이한 배포 및 패키지 관리를 위한 도커를 통한 컨테이너화

`
        
    },

    {
        articleType: 'about',
        postId: '학습관리시스템',
        title: `학습관리시스템 개발`,
        cover: '',
        contents: `
        
## 1. 한국기술교육대학교 온라인평생교육원 학습관리시스템 개발

- 한국기술교육대학교 원격평생교육원과 원격교육연수원 학습관리시스템 개발 및 유지보수

- 시스템 민원 처리 및 대응, 성능 향상 위한 쿼리 개발 및 리팩토링

- SQL Injection, XSS, 정보누출, 암호화 및 인증 등 웹 보안 취약점 보완 및 대응

- 웹서버(apache), WAS서버(tomcat, weblogic) 운용 및 리소스 모니터링

<img src='/images/lms_display.png'>

## 2. 모바일 학습관리 앱 개발

- 푸시 알람 서비스를 통한 자동화된 학습 독려 운영 모델 구현

- 학습 소셜 네트워킹 서비스를 접목한 비형식 모바일 시스템 구축

- 모바일 퍼스트 시대에 맞춰 모바일 학습 앱 개발/ 운영하여 고객 서비스 만족도 향상

<img src='/images/lms_mobile.png'>
`
        
    },
    {
        articleType: 'dev',
        postId: 'Post1',
        title: '낡은 플랫폼의 추억(1): 분산의 필요성',
        cover: '',
        contents: `

몇 년 전, 텍스트 마이닝 플랫폼을 운영하는 회사에서 근무한 적이 있다. 이 플랫폼(이하 'P')의 사용자는 브라우저를 통해 서비스에 접속하여 데이터 수집부터 분석에 이르는 파이프라인을 사용할 수 있었다. 시스템 구조는 여러 컴포넌트로 구성되어 있었으며, 사용자에게 UI/UX를 제공하는 웹 서버, 데이터 수집을 담당하는 크롤러, 전처리기, 사회연결망 분석을 수행하는 분석기 등이 주요 요소였다. 이 외에도 DB와 엘라스틱서치 같은 데이터 저장소들이 클라우드 상에서 실행되며 상호작용하는 SaaS 형태의 소프트웨어였다.

필자는 P의 전반적인 운영과 시스템 개선을 맡았다. 입사 후 시스템을 리버스 엔지니어링하면서 놀라움을 금치 못했는데, P가 실제로 서비스 중이라는 사실이 믿기 어려웠기 때문이다. 웹 서버는 사실상 프로토타입 수준이었을 뿐만 아니라, 데이터 수집, 전처리, 분석을 담당하는 수십 대의 서버가 짧은 주기로 DB를 풀링(polling)하면서 DB에 과도한 부하를 주고 있었다. 200%가 넘는 CPU 점유율을 목격했을 때의 아찔함은 지금도 생생하다.

<p align='center'>
<img src='/images/polling.png' height='60%'>
</p>

물론, 상태 확인만 필요한 경우라면 밀리세컨드 단위의 풀링 주기가 아니라는 전제 하에 풀링 자체는 나쁘지 않다. 그러나 서버를 점차 확장할 계획이라면 각 서버가 DB를 직접 풀링하는 방식은 성능과 확장성을 크게 저해하는 위험한 구조다. 당시 이러한 문제를 지적하는 사람은 없었다. 운영 인력이 부족해 시스템을 개선할 여력이 없었고, 서비스는 그럭저럭 운영되며 일정한 매출을 내고 있었기 때문이다.

입사 전에는 이 플랫폼이 훌륭하다고 생각했지만, 실제로 내부를 살펴본 후 큰 실망을 느꼈다. 확장성을 전혀 고려하지 않은 시스템이었으며, 이 상태로 운영을 지속하면 플랫폼이 무너지거나 VoC(고객 불만)에 압도당할 것이 뻔해 보였다.

사실, 이 문제는 분산 처리 관점에서 이미 연구가 충분히 이루어진 주제다. 핵심은 사용자가 많아지면서 증가하는 부하로 인해 발생하는 병목을 해결하는 것이다. 병목 구간을 개선하면 문제가 해결될 수 있다.

AS-IS 구조에서는 각 Worker 서버가 Select 쿼리를 통해 작업 정보를 DB에서 개별적으로 가져와야 한다. 이 방식은 병목을 유발할 가능성이 크다. 반면, TO-BE 구조에서는 Worker 서버들이 직접 쿼리하는 대신, Manager 서버가 모든 작업을 쿼리하고 유휴 상태의 Worker 서버에 작업을 전달(deliver)한다.

<p align='center'>
<img src='/images/asis_tobe.png' height='60%'>
</p>

TO-BE 구조의 핵심은 상태 체크이다. Master 서버가 Worker 서버가 유휴한 지를 고려하지 않고 무작위로 작업을 전달한다면 구조 변경의 이득을 극대화할 수 없다. 예를 들어, Worker 서버가 작업 처리 중인데 Master 서버가 새로운 작업을 요청하면 손이 부족하니 결국 병목이 발생할 것이다. 병목 발생 시점을 늦추려면 Worker 서버 내 작업 처리 프로세스를 여러 개 두면 되지만 궁극적으로 병목은 피할 수 없다.

따라서 Master 서버는 다음의 getIdleWorkerCount와 같은 함수를 사용하여 주기적으로 Worker 서버의 유휴 상태를 체크하여 작업을 전달해야 하며, 유휴 상태의 프로세스가 없다면 다른 Worker 서버로 작업을 리다이렉트(redirect)해야 한다.

<p align='center'>
<img src='/images/dev/getIdleWorkerCount.png' height='60%'>
</p>

Worker 서버에는 Master 서버가 전달한 작업을 처리하는 1개 이상의 프로세스가 상시 동작한다. Worker 서버는 동작중인 모든 프로세스 작업 여부를 모니터링해야 하므로 스테이트풀(stateful)해야 한다. 스테이트레스(stateless)한 RESTful API은 통신 방법으로는 부적절하지만 소켓(socker) 통신은 적용해 볼만 한다. 하지만 Master 서버는 새로운 작업이 생성될 때만 Worker 서버로부터 헬스상태, 유휴상태를 보고 받으므로 양방향 통신이 필요하지 않고 연결 상태를 지속적으로 유지할 필요도 없다. gRPC는 스테이트풀(stateful)하면서 단방향으로 통신이 가능하므로 충분히 적절한 대응이 될 수 있다. gRPC에 대해서는 다음에 다시 한 번 설명하겠다. 

Master 서버와 Worker 서버가 통신할 수 있도록 서로 간의 엔트리 포인트를 다음과 같이 지정해줘야 한다. 새롭게 추가된 Worker 서버가 있다면 서버의 엔트리 포인트를 반드시 추가해줘야 한다.

<p align='center'>
<img src='/images/dev/earth-compose.png' height='60%'>
</p>

다음의 동영상은 DB에 등록된 작업이 Master 서버가 Worker 서버로 작업을 배정하고, Worker 서버가 작업을 처리하는 로그를 녹화한 것이다.

<p align='center'>

<iframe width="560" height="315" src="https://www.youtube.com/embed/SJ3icOspmMg?si=Jzr7SajSccpGPGt1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

</p>

이상과 같은 분산 처리 시스템이 P에 적용한 후에는 CPU점유율이 40~50% 수준으로 떨어졌다. 무엇보다 Master 서버를 통해 Worker 서버를 중앙집중식으로 제어하고 로깅할 수 있게 되면서 수 개이던 Worker 서버를 순식간에 수십여개로 이상없이 늘려 뛰어난 확장성을 구현하게 되었다.

결과적으로 TO-BE 구조는 AS-IS 구조에 비해 CPU 점유율을 4배 이상 낮췄으며, 이와 함께 고객 문의도 대폭 줄어들었다. 하지만 이 개선은 단순히 성능만 향상시킨 것이 아니라, 운영 효율성 측면에서도 큰 변화를 가져왔다. 시스템의 안정성이 높아지고, 플랫폼이 더욱 확장 가능한 구조로 진화하면서, 서비스의 신뢰도 또한 상승했다.

이 경험을 통해 내가 깨달은 중요한 교훈은, 기술적인 문제는 종종 복잡한 해결책을 요구할 수 있지만, 그 해결책은 기본적인 시스템 설계와 구조적 접근에서부터 출발한다는 것이다. 무엇보다 중요한 것은 시스템의 성장을 염두에 두고, 확장성과 효율성을 고려한 설계를 하는 것이다.

비록 당시에는 여러 가지 어려움이 있었지만, 그 경험을 통해 기술적 문제 해결뿐만 아니라, 운영 환경에서의 실용적인 접근법을 배우게 되었다. 그리고, 이런 개선 작업이 결국에는 서비스의 품질을 높이고, 사용자 경험을 향상시키는 데 큰 기여를 한다는 사실을 다시 한 번 깨달았다. 이러한 경험들이 쌓여 더 나은 기술 리더로 성장하는 밑거름이 되었다고 생각한다.
`
    },

    {
        articleType: 'dev',
        postId: 'Post2',
        title: '낣은 플랫폼의 추억(2): 배포 방식의 결정',
        cover: '',
        contents: `

적어도 필자가 함께 일했던 개발자들은 배포를 염두에 두지 않고 개발하는 경우가 많았다. 이는 어쩌면 당연한 일이었을지도 모른다. 해야 할 개발 작업은 산더미 같고, 운영까지는 아직 시간이 남았으니, 배포까지 고려할 여유가 없었을 것이다. 필자 역시 운영 중인 시스템을 직접 담당하기 전까지는 개발 단계에서 배포를 함께 고민해야 한다는 사실을 깊이 깨닫지 못했으니, 누구를 탓할 자격도 없다.

새 버전을 배포할 때는 항상 **현재 누군가가 이 서비스를 사용하고 있다는 점**을 명심해야 한다. 간단히 수정하고 재빠르게 반영하면 된다고 생각하기 쉽지만, 작은 변경조차 의도치 않은 부작용(side effect)을 초래해 다른 문제를 발생시킬 수 있다. 따라서 배포는 항상 신중하고 체계적으로 이루어져야 한다.

배포 방식은 다양하다. 대표적으로 **A/B 배포**, **롤링 배포**, **카나리 배포**가 있다.  
- **A/B 배포**는 운영 서버와 동일한 환경의 파일럿(pilot) 서버에서 새 버전을 먼저 테스트한 후 본격적으로 배포하는 방식이다.  
- **롤링 배포**는 여러 대의 운영 서버에 새 버전을 **순차적으로 점진적으로 배포**하는 방법이다.  
- **카나리 배포**는 롤링 배포와 비슷하지만, 특정 사용자 그룹(포커스 그룹)에 먼저 새 버전을 배포하고, 이후 문제 여부를 확인한 뒤 전체적으로 확장하는 방식이다. 특히, 장애가 발생하면 신속히 이전 버전으로 롤백한다는 점이 큰 특징이다.  

배포 방식은 서비스 특성, 시스템 규모, 향후 확장성을 고려해 신중히 선택해야 한다. 예를 들어, 회사 소개용 홈페이지처럼 사용자 수가 많지 않고, 금전적 이윤을 기대하지 않는 서비스라면 굳이 롤링 배포나 카나리 배포와 같은 복잡한 방식을 적용할 필요는 없다. 하지만 쿠팡과 같은 대형 쇼핑몰처럼 사용자 유형이 다양하고 서비스 중단 시 영향이 큰 경우에는 A/B 배포나 롤링 배포만으로는 부족할 수 있다. 수정 사항의 영향력이 크기 때문에, 포커스 그룹을 활용한 사전 테스트와 신중한 검토를 통해 새 버전을 배포해야 한다.

필자가 담당했던 P의 경우, 쿠팡처럼 대규모 플랫폼은 아니었지만, 일정 수 이상의 사용자가 있었고 결제가 포함된 민감한 서비스를 제공하고 있었다. 사용자 그룹이 충분하지 않아 카나리 배포는 적합하지 않았지만, **롤링 배포**를 통해 안정성을 확보하면서도 점진적으로 새 버전을 배포하는 방식이 플랫폼에 가장 적합했다.

**배포는 단순히 기술적 작업이 아니다.** 이는 서비스 사용자에게 안정적인 경험을 제공하고, 나아가 서비스에 대한 신뢰를 쌓는 중요한 과정이다. 배포 전략을 적절히 선택하고 운영하는 것은 개발자의 역할을 넘어, 비즈니스 전반의 성공을 좌우하는 핵심 요소라 할 수 있다. 필자 역시 이러한 경험을 통해 배포의 중요성을 절감했고, 단순히 개발을 넘어 서비스 운영의 전반을 고민하는 태도를 갖게 되었다. 결국, 좋은 배포는 기술뿐 아니라, 사용자를 향한 세심한 배려와 책임감에서 시작된다.

    `
    },
    
    {
        articleType: 'dev',
        postId: 'Post3',
        title: '낡은 플랫폼의 추억(3): 컨테이너의 필요성',
        cover: '',
        contents: `

<p align='center'>
<img src='/images/symbol/25_docker.svg' height='300px'>
</p>

### 패키지 관리에서 컨테이너화로: 확장성과 호환성의 고민 해결

아이폰의 등장은 단순히 모바일 앱 개발 기술의 발전을 이끌었을 뿐 아니라, 웹 기술 전반에도 큰 영향을 미쳤다. 하지만 기술 발전의 이면에는 라이브러리 호환성 문제라는 복잡한 도전이 따라왔다. 다양한 라이브러리가 쏟아져 나오면서, 서로 간에 호환되지 않는 경우가 빈번했고, 이는 개발자들에게 큰 골칫거리가 되었다.  

이러한 문제를 해결하기 위해 등장한 것이 **패키지 관리 도구**다. 예를 들어, 자바스크립트 환경에서는 **package.json** 파일을 통해 NPM(Node Package Manager)이 패키지를 통합적으로 관리한다. Java에서는 **Maven**이나 **Gradle**, C#에서는 **NuGet** 같은 도구들이 유사한 역할을 한다. 이들 도구 덕분에 패키지 관리의 생산성이 크게 향상되었고, 개발자들은 더 나은 효율로 작업할 수 있게 되었다.  

하지만 최근 소프트웨어 아키텍처는 점점 더 복잡해지고 있다. **마이크로서비스 아키텍처**의 부상으로 서버의 개수와 유형이 폭발적으로 증가하면서, 단순한 패키지 관리만으로는 해결되지 않는 문제들이 나타났다. 이런 변화는 **쿠버네티스**와 같은 오케스트레이션 기술의 필요성을 더욱 부각시켰다.  

### P에서의 경험: 서버 확장과 호환성 문제  

P 프로젝트의 경우, 초기에는 수 개에 불과하던 서버가 점점 늘어나더니 어느새 수십 개에 달했다. 서버가 많아지면서 자연스럽게 **모니터링과 관제**가 어려워졌고, 확장성 측면에서도 새로운 한계에 부딪혔다.  

형상 관리와 배포를 Git으로 수행하고 있었지만, 문제는 서버 간의 운영체제 유형과 버전 차이였다. 예컨대, 레거시 서버는 **Ubuntu 16.04 LTS**, 신규 서버는 **Ubuntu 18.04 LTS**로 운영체제가 달랐고, 이로 인해 설치된 **Python 버전**도 서로 달랐다. 이를 맞추지 않으면 애플리케이션 실행 중 오류가 발생했다. 결국, 운영체제 업그레이드 작업을 수십 번 반복해야만 했다.  

### 도커를 도입한 이유  

이런 비효율적인 상황을 해결하기 위해 도입한 것이 바로 **도커**였다. 서버를 추가할 때마다 환경 설정에 골머리를 앓는 일이 없어야 한다고 판단했다. P의 **Worker 서버**를 도커 컨테이너로 전환하고, 이를 **Docker Hub**에 업로드하여 필요한 경우 언제든 사용할 수 있도록 했다.  

새로운 서버를 추가하는 작업도 훨씬 간단해졌다. 이제는 단순히 도커를 설치하고, 이미지를 **docker pull** 명령어로 가져온 뒤 실행만 하면 됐다. 설치 과정과 시간은 대폭 단축되었고, 환경 차이로 인한 오류 걱정도 사라졌다.  

\`\`\`bash
docker pull myapp/worker:latest  
docker run -d myapp/worker:latest  
\`\`\`  

### 결론: 환경 관리를 넘어 확장성과 생산성의 향상  

도커 도입 후, 새로운 서버 환경을 맞추는 번거로움은 더 이상 존재하지 않았다. 컨테이너화 덕분에 환경 관리 문제를 해결했을 뿐만 아니라, 배포와 설치의 생산성도 크게 향상되었다. 기술의 발전은 단순히 문제를 해결하는 데서 그치지 않는다. 올바른 도구를 선택하고 활용하는 과정에서 더 나은 확장성과 효율성을 만들어낼 수 있다는 점, 그것이 이 경험에서 얻은 가장 큰 교훈이다.
    `
    },
    
    {
        articleType: 'dev',
        postId: 'Post4',
        title: '분산 처리: gRPC의 유용성',
        cover: '',
        contents: `

<p align='center'>
<img src='/images/symbol/18_grpc.png' height='300px'>
</p>

분산 처리 기술은 십여 년 전 Google의 Hadoop을 통해 주목받기 시작하면서 빠르게 발전해 왔다. 특히, Apache Hadoop 생태계는 그 폭과 깊이를 확장하며 세분화되어 갔다. 이와 같은 변화 속에서 분산 환경에서의 효율적인 데이터 교환 기술이 중요한 화두로 떠올랐고, 그중 필자는 **gRPC**를 가장 선호한다. 이를 제대로 이해하기 위해서는 먼저 **RPC(Remote Procedure Call)**의 개념을 알아야 한다.

<p align='center'>
<img src='/images/dev/rpc.png' height='250px'>
</p>

 RPC는 원격지에 위치하는 프로세스의 주소공간에 정의된 함수나 프로시저를 실행하여 프로세스 간의 통신을 수행하는 방법이다. RPC를 위해서는 IDL(Interface Definition Language)이라는 호출 규약이 정의되어야 한다. 서로 사양이 다른 두 프로세스가 통신을 하기 위해서는 IDL을 이용한 컴파일을 통해 클라이언트와 서버의 스터브(stub) 코드를 생성해야 한다. 스터브는 원격지의 프로세스를 대리하는 루틴으로, 클라이언트 혹은 서버의 객체를 대리하여 원격 프로세스의 요청을 받아들이고 응답을 전송한다. 또한 스터브는 객체가 요청한 데이터를 마샬링(marshaling)하여 상대방에게 전송하고, 작업이 완료된 데이터를 언마샬링(unmarshaling)하여 객체가 활용할 수 있는 형태로 변환한다.
 RPC는 분산 컴퓨팅 환경에서 유용하게 활용 가능하다. RPC를 이용하면 프로세스 간 양방향 통신을 비교적 쉽게 구현할 수 있으며, IDL을 기반으로 하기 때문에 프로그래밍 언어에 구애받지 않고 다양한 환경으로 시스템을 확장하기 용이하다.

gRPC는 구글이 개발한 원격 프로토콜 호출(RPC, Remote Protocol Call) 방식이다. gRPC는 데이터 전송을 위해 HTTP/2를 이용하고 프로토콜 버퍼(Protocol Buffer)라는 인터페이스 정의 언어(IDL, Interface Definition Language)를 사용하여 다른 프로세스의 메소드를 호출한다.

HTTP/2는 HTTP/1의 성능을 개선한 버전이다. HTTP/1은 기본적으로 클라이언트 요청에 서버가 응답하기 때문에 매 요청마다 커넥션(connection)을 생성해야 하며 쿠키를 포함한 헤더로 인해 용량이 크다. 반면 HTTP/2는 헤더 테이블과 호프만 인코딩 기법을 사용하여 헤더 정보를 압축하고, 서버가 클라이언트 요청 없이도 리소스를 전달할 수 있으며 하나의 커넥션만으로 데이터 교환이 가능하기 때문에 HTTP/1에 비하여 성능이 뛰어나다.

RPC를 이용하는 환경에서 클라이언트는 서버의 메소드를 직접 호출하여 데이터를 요청한다. 만약 서버와 클라이언트 구현에 사용된 프로그래밍 언어나 프레임워크가 서로 다르다면 동일한 데이터 구조임에도 불구하고 표현 방식이 달라 데이터 전송을 하지 못할 수 있다. 직렬화는 이처럼 상이한 시스템 환경에서 데이터 구조를 동일한 표현으로 변환하는 과정으로, 프로토콜 버퍼는 gRPC에서 사용하는 직렬화 데이터 표현 방식이다.

gPRC는 다양한 언어와 플랫폼에서 사용이 가능하고, RPC의 다른 방식 보다 구현이 쉽고 지원하는 기능 많고 성능이 우수하다. 또한 HTTP/2 기반이기 때문에 실시간 및 비동기식 데이터 전송, 푸시 서비스를 간단하게 구현할 수도 있다. 이러한 장점 덕분에 로컬환경 내의 애플리케이션 간 데이터 교환이나 마이크로서비스(Microservice)를 구축하기 위한 해법으로 많은 개발자들에 의해 채택되고 있다. 

- [gRPC 파이썬 예제보기](https://github.com/cerulean85/Sophia/blob/master/Task-oriented/gRPC/02.%20%EC%98%88%EC%A0%9C_Python.md)

- [gRPC Duplex Stream 예제](https://github.com/cerulean85/grpcDuplexStreamSample)
    `
    },

    {
        articleType: 'dev',
        postId: 'Post5',
        title: '형상 관리의 필요성',
        cover: '',
        contents: `

<p align='center'>
<img src='/images/symbol/26_git.svg' height='150px'>
</p>

코딩할 때 가장 유용한 기능 중 하나는 이전에 작성했던 코드를 되돌리는 **UNDO**다. 하지만 UNDO는 텍스트를 저장하는 **스택(stack)** 공간이 제한되어 있어, 간혹 이전 상태로 되돌리지 못해 난감한 상황을 겪을 때가 있다. 필자는 이를 '버전 소멸'이라고 부르는데, 이러한 문제를 방지하는 데 **SCM(소스 제어 관리, Source Control Management)** 은 매우 유용한 도구다.  

SCM을 사용하면 원격 저장소에 코드의 이전 버전을 항상 보존할 수 있어, 스택 공간의 한계로 인해 코드를 복구하지 못하더라도 원격 저장소에서 다시 가져오거나 특정 버전으로 되돌리면 된다. 개인적으로는 주로 **버전 소멸 방지**를 위해 SCM을 활용하지만, SCM의 또 다른 큰 장점은 **소스 공유**다. 학창 시절에는 USB, 메신저, 이메일 등을 통해 소스를 공유하곤 했는데, 이것이 얼마나 비효율적이었는지 실무에 들어가고 나서야 깨닫게 되었다. SCM은 소프트웨어 개발 및 유지보수 과정에서 발생하는 **소스 코드**나 **문서 변경**을 체계적으로 관리할 수 있는 도구다.

---

#### **SCM의 방식: 중앙 집중식과 분산형**
SCM은 **중앙 집중식**과 **분산형** 두 가지 방식으로 버전을 관리한다.

1. **중앙 집중식 버전 관리**  
   - 모든 파일이 중앙 서버에 저장되고, 클라이언트가 서버에 접근해 파일을 수정한다.  
   - 대표적인 예: **SVN(Subversion)**.  
   - SVN은 커밋(commit) 시 변경 사항이 바로 원격 서버에 반영된다.  

2. **분산형 버전 관리**  
   - 각 클라이언트가 로컬에 파일과 변경 기록을 저장하며, 원격 서버와 동기화를 수행한다.  
   - 대표적인 예: **Git**.  
   - Git은 파일 수정 후 원격 저장소에서 변경 사항을 먼저 가져오고(pull), 충돌(conflict)을 해결한 뒤, 커밋(commit)을 거쳐 별도로 원격 서버에 업로드(push)한다.  

---

#### **Git vs SVN: 충돌 관리 경험**  
SVN을 사용하던 시절, 사수와 충돌 해결 과정에서 의견이 충돌했던 경험이 많았다. 이런 이유로 개인적으로는 **충돌을 미연에 방지할 수 있는 Git**을 더 선호한다.  

다만, Git을 사용한다고 해서 충돌을 완벽히 방지할 수 있는 것은 아니다. 예를 들어, 내가 수정한 코드가 다른 사람이 수정한 코드와 충돌해 **pull 단계에서부터 작업이 중단**되는 경우도 있다. 이런 상황이 반복되면 생산성이 저하될 수 있으니, **효율적인 협업 규칙과 충돌 방지 전략**을 마련하는 것이 중요하다.  

---

#### **SCM을 넘어서**
SCM은 단순히 코드를 저장하거나 관리하는 도구가 아니라, 개발자 간의 협업과 프로젝트 성공을 뒷받침하는 핵심 기술이다. 특히 **효율적인 워크플로우 구축**, **자동화 도구와의 통합**, 그리고 **CI/CD(Continuous Integration/Continuous Deployment) 파이프라인**과의 연계를 통해 개발의 품질과 속도를 크게 향상시킬 수 있다.  

결국 SCM의 진정한 가치는 단순히 충돌을 피하거나 코드를 복구하는 데 그치지 않는다. 이는 개발자가 더 창의적인 작업에 집중하고, 팀 전체가 효율적으로 협력하며, 프로젝트의 목표를 효과적으로 달성할 수 있도록 돕는 데 있다. SCM을 잘 활용한다면, 그저 코드 관리 도구를 넘어 개발 생산성과 협업의 혁신적인 도구로 자리 잡을 것이다. 

        `
    },
    {
        articleType: 'essay',
        postId: 'Post1',
        title: '독서의 이유',
        cover: '/images/essay_post1.jpg',
        contents: `
책을 많이 읽으면 좋다는 이야기를 듣지 않고 자란 사람이 있을까? 필자 역시 그 말을 교훈삼아 독서를 꾸준히 하려고 노력해왔지만 정작 누군가 독서의 이유를 알려달라고 하면 대답하기가 참 어렵다. 알면서도 말하지 못하는 그 상황이 답답해서 독서의 이유에 대해 정리를 해보았다.

책을 읽는 이유는 다양하다. 소설을 좋아하는 사람이라면 흥미로운 이야기에서 상상의 즐거움이, 지적 호기심이 많은 사람이라면 깨달음의 즐거움과 지식의 신비를 탐구가 독서의 목적일 것이다. 또한 자기계발을 하거나 상식을 쌓기 위해 서점을 기웃거리는 사람도 있을 것이다.

독서를 어떻게 처음 하게 되었는지 곰곰이 생각해보면 필자의 경우는 허영심 때문이다. 독서란 것이 누구나 즐길 수 있지만 누구나 하는 취미는 아니고, 과시하기에 딱 좋다보니 한참 과시욕이 강했던 사춘기 시절에는 책을 보면 사람들이 좋아해줄 거라 생각했다. 실제로 그 의도는 잘 들어먹혀 모범생 이미지로 학창 시절을 보낼 수 있었다. 지금 돌이켜보면 부끄럽지만 허영심 충만했던 그 시절에는 이해도 되지 않으면서 톨스토이, 도스토예프스키 등 고전 작가들의 문학을 주로 읽었었는데, 어쩌면 친구들은 날 무시한 게 아니라 이상한 녀석쯤으로 여겼을지도 모른다.

보통 사람이 허영에 취하면 결과가 좋지 않다. 허영에 젖어 물건을 이것저것 사다보면 빚더미에 오르고, 과시를 목적으로 운동하다보면 몸을 다쳐 병원 신세를 지기도 한다. 직장에서도 상사에게 잘 보일 목적으로 무리하게 야근하다 보면 이내 건강을 해치게 되고, 심지어는 가정이 파괴되기도 한다. 이렇게 허영이 우리 삶을 어떻게 파괴시키는지는 굳이 서술하지 않아도 한번쯤은 그런 경험이 있을 것이다.
그러나 독서는 허영이 침범할 수 없는 영역이다. 경험상 아무리 책을 많이 사도 다른 물건을 살 때 쓰는 것보다 지나침이 없고, 아무리 오래 읽어도 절대 무리하여 날을 세우는 경우도 잘 없다. 또한 격렬하게 몸을 움직이지 않으니 다칠 일도 없다. 딱히 한계를 정한 것도 아닌데 항상 적당한 선에서 취미가 마무리 되니 다른 취미와 비교했을 때 건강하고 건전하며 자극적이지 않다.

취미 수준에서의 독서는 무조건 똑똑해지거나 말발이 좋아지지는 건 아니다. 똑똑하거나 말을 잘 한다는 건 곧 잘 알고 있다는 것이지만 책 한 권 읽는다고 무언가를 갑자기 잘 알기는 어렵고 시간도 많이 걸린다. 그래서 만약 독서의 목적이 이런 것이라면 독서와 함께 별도의 조사나 글쓰기 등의 부가적인 활동을 병행해야 하니 독서에 대해 너무 많은 기대를 하지 않아야 한다. 

비록 독서만으로 우리는 똑똑해지지는 않지만 다른 세상이나 지식, 지혜에 대한 충분한 컨셉(concept)은 얻을 수 있다. 자신이 경험하지 못한 일들이나 자신이 속해 있는 환경에서는 죽을 때까지 접할 수 없는 지식을 우리는 책을 통해 소개받을 수 있다. 그렇게 우리는 독서를 통해 내면 세계를 넓힐 수가 있다. 이런 것들이 쓸데없는 것이라 치부하는 사람도 분명 있겠지만, 경제나 정치 같이 우리에게 직접적으로 영향을 미치는 분야에 대한 통찰은 우리가 간과해서는 안 되는 부분이므로 개인적으로는 이 부분에 대해서는 하기 싫어도 반드시 해야 한다고 본다.

책은 영상 미디어 매체보다 몰입도는 떨어진다. 이는 당연한 사실로, 애초에 미디어는 흥미와 재미를 위주로 지루하고 어려운 내용은 최대한 배제하지만, 자극적인 부분은 최대한 넣는 극단성을 전제로 하기 때문이다. 아무리 책이 재미있고 쉽게 쓰였다고 해도 가치 전달을 우선으로 하므로 발휘할 수 있는 몰입도에는 한계가 있을 수 밖에 없다.

또한 독서는 굉장히 능동적인 행위이다. 몸의 움직임은 없지만 머리는 글을 해석하기 위해 쉴 새없이 활동을 하고 해야 한다. 이 활동은 에너지가 상당히 많이 필요한 작업이니 퇴근 후 지친 상태에서는 사람에 따라서는 매우 힘든 일일 수 있다.

이러한 연유로 우리는 독서를 하지 않는다. 우리나라 성인의 독서량이 매우 부족하다는 것은 노동의 강도가 그만큼 세다는 반증일 수도 있겠지만, 그렇다고 해서 부족한 독서량을 그러려니 하고 넘어갈 수는 없다. 

독서를 하기에는 우리 주변에 자극적인 것이 너무 많다. 텔레비전을 틀면 예능, 드라마, 영화 등 프로그램이 우리를 유혹하고, 컴퓨터를 켜면 게임과 쇼핑에 빠져 몇 시간을 훌쩍 흘려보낸다. 그 이면에는 이 사람들을 통해 한탕 두둑이 챙기려는 기업들의 마수가 뻗쳐져 있으니 이것조차 자본주의 폐해라 생각하면 씁쓸하다가도 방심하면 눈뜨고 코가 베여버릴 것 같아 정신이 번쩍 든다. 이렇게 생활 곳곳에 독서를 방해하는 자극적인 것들이 판을 치고 있으니 독서량이 당연히 부족할 수밖에 없다.

혹자는 독서량에 대한 통계가 스마트폰으로 읽은 것은 포함되지 않기 때문이라며 통계가 잘못 되었다고 하지만, e-book이 아니고서야 인터넷에서 조잡하고 깊이가 부족한 단문을 통해 독서의 효과를 보는 것은 어려우므로 온전한 독서를 하였다고는 할 수 없다. 잡지 또한 마찬가지이다. 잡지를 통해서는 시대의 트렌드를 파악할 순 있지만, 기고자마다 분량이 정해져 있기 때문에 짧은 글 속에 깊이를 표현하는 데는 무리가 있으므로 역시 독서의 효과를 보기가 어렵다. 

경제가 발전하고 사회가 고도화 되면서 사람들의 취향과 가치관 역시 다양해지고 있다. 이런 추세 속에서는 독서 역시 무수히 많은 취미 중 하나에 불과하지만, 경제성과 효과를 따졌을 때 이만큼 가성비 좋은 취미는 없다. 그 가치를 인정하면서도 사람들은 자극과 쾌락에 집중한다. 그러나 그것들은 일시적인 진정제 효과는 발휘할 수 있지만 궁극적으로는 몸과 마음을 망칠 뿐이다. 부디 우리 내면의 잔잔한 고요를 느끼며 쉴 수 있는 시간을 더 많이 가지기를 바란다.
    `
    },
    {
        articleType: 'essay',
        postId: 'Post2',
        title: '비틀즈의 고독',
        cover: '/images/pepper.jpg',
        contents: `
1960년대를 주름 잡았던 팝 아티스트인 비틀즈를 모르는 사람들은 아마 없을 것이다. 우리나라에는 비틀즈의 앨범을 찾아 듣지는 않아도 ‘Let it be’, ‘Yesterday’라는 곡이 대중에게 잘 알려져 있으니 비틀즈가 사랑 노래를 전문으로 부르는 점잖은 가수 정도로 여기는 사람들이 많다. 그러나 의외로 비틀즈는 록(rock) 가수이다. 우리나라로 치면 ‘김경호’와 같은 장르의 가수인 셈이다. 어쩐지 낯선 느낌이 들지만, 알고 보면 클래식을 제외하고 젊은 층이 즐겨 듣는 대중음악 대부분은 록에 기반을 두고 있다고 해도 과언이 아니다. 그만큼 록의 표현력은 다양하다.

비틀즈가 활동했던 1960년대는 록음악이 확산되면서 본격적으로 하나의 음악 장르로 자리 잡는 시기였다. 이전까지 록은 대중들에게는 그저 철없는 젊은 사람들이 불러대는 시시한 음악으로 여겼는데, 비틀즈는 이러한 대중의 인식을 바꾸는 결정적인 역할을 했다.

비틀즈는 활동을 시작한 1960년부터 1970년대에 해체하기까지 많은 앨범을 발매하였다. 총 13개의 정규 앨범을 발매하였는데, 앨범 자체의 우수성을 비롯하여 대중과 음악, 문화에 미친 영향력을 고려하였을 때 거의 대부분의 앨범이 롤링스톤지가 선정한 명반 반열에 이름이 올라 있다. 이 중에 특히 1967년에 발매된 ‘Sgt.Pepper’s Lonely Hearts Club Band(이하 ‘페퍼상사’)‘은 롤링스톤지가 선정한 역사상 최고의 앨범이다.

이 앨범은 록음악을 인정하지 않는 당대 대중들에게 인지도를 얻게 되면서 록음악의 위상을 높이고 확산을 주도한 위대한 앨범으로 평가된다. 대중음악과 클래식의 분리가 심화되던 시기에 클래식을 즐겨듣던 사람까지 록음악으로 편입시켰으며, 컨트리 음악이 지배적이던 미국 지방으로의 록음악 확산에도 기여를 하였다. 또한, 비틀즈에게는 다소 냉소적이던 기성세대들이 가진 거부감 역시 해소한 앨범이기도 하다.

그런데 정작 비틀즈가 이 앨범을 제작할 때는 대중과 멀어져 있었다. 1966년 6월, 일본에서 는 공연 장소가 ‘부조칸’으로 선정되었다. 그러나 그곳은 일왕이 연설하는 장소로, 일본 무도의 성지라는 이미지가 강해 외국 밴드의 공연을 탐탁치 않아하는 일본인들이 많았다. 비틀즈는 몇몇 일본인들에게 일본인과 천황을 모욕한다며 공연 중단 요구와 살인 협박을 받아야 했다.

필리핀 공연에서도 비틀즈는 퍼스트 레이디 이멜다 마르코스로부터 모욕을 받았다. 당시 필리핀은 계엄령 치하 아래 마르코스 내외가 정치를 장악하고 있었다. 비틀즈의 공연 소식을 들은 이멜다 마르코스는 일방적으로 비틀즈에게 초청 공연을 해줄 것을 요구하였지만, 비틀즈는 이 소식을 뒤늦게 알게 되었을 뿐만 아니라, 정치인과의 만남을 꺼림칙하게 여겨 그녀의 초청에 응하지 않았다. 이에 심한 모욕감을 느낀 이멜다 마르코스는 언론을 통해 비틀즈에게 테러 협박과 폭행을 일삼도록 대중의 분노를 자극하는 한편, 비틀즈의 출국을 방해하기 위해 막대한 세금을 요구하는 등 미개하고 치사한 보복 행위를 일삼았다. 

다행히 비틀즈는 무사히 영국으로 돌아올 수 있었지만, 존 레논의 과거 종교 관련 인터뷰 내용이 주목을 받으면서 기독교 중심의 국가들의 대중을 위주로 또 한 번 맹렬한 비난을 받게 되었다. 이 인터뷰는 ‘예수보다 비틀즈가 유명하다’는 말로 잘 알려져 있다.

한편으로 비틀즈는 지난 4년 동안 1400회나 되는 콘서트를 투어하며 이미 투어 콘서트에 깊은 회의감을 갖고 있던 터였고, 이러한 일련의 사건들이 겹치면서 비틀즈는 투어 콘서트를 하지 않겠다고 공식적으로 선언하며 콘서트를 전면 중단하였다. 이렇게 비틀즈는 연이은 이슈와 대중들로부터의 비난과 누적된 피로로 대중과 멀어지며 그 신화가 이대로 끝나는 듯 했다.

이후 비틀즈는 공연 보다는 레코딩 작업에 집중하기로 하였다. 비록 대중과 멀어졌지만 오히려 그런 현상이 비틀즈에게는 음반 작업에만 몰두할 수 있는 좋은 명분이 되었다. 새로운 음악에 대한 씻을 수 없는 갈증을 채우기 위해 비로소 그들은 그들만의 ‘위대한’ 음악을 탄생시키기 위해 스스로를 고독 속으로 밀어 넣었다. 그 과정에서 비틀즈 리드 보컬이었던 폴 매카트니는 기존의 비틀즈와는 다르게 음반작업을 해보고 싶었고, 페퍼상사라는 가상의 록그룹을 연기해보자는 아이디어를 멤버들에게 제안하였다. 그 결과로 페퍼상사 앨범이 탄생하였으며, 그들의 이 시도는 그 동안 어떤 아티스트도 하지 않았던 최초의 시도가 되었다. 

투어를 마치고 대중들로부터 받은 상처에 절망하여 활동을 중단 하였다면 어쩌면 대중음악은 다른 방향으로 흘렀을지 모른다. 하지만 비틀즈는 위태한 그 순간에 오히려 위대해지는 선택을 하며 남들과는 다른 행보를 보였다. 힘들고 어려운 순간 자멸하며 술과 마약으로 삶을 방탕하게 보내다 파국을 맞는 아티스트들과는 달랐다. 그들은 결국 기념비적인 앨범을 발매하며 재능과 열정이 집중되었을 때 어떤 쾌거를 이루어 내는지 스스로 증명하고야 말았다.
우리는 고독에 대해 부정적이다. 이것조차 미디어와 교육의 의도된 세뇌인지는 모르겠지만, 아무튼 우리는 고독을 다루는 방법에 대해서는 배운 적이 없다. 아직도 우리는 감정 통제는 개인의 영역일 뿐이며, 부정적인 감정을 표출하는 사람을 저급하다고 비난한다. 아직도 감정은 통제할 수 없는 ‘자연재해’로 여겨 사후 치료에만 집중하고 있는 형국이지만 감정은 학습과 훈련을 통해 인지하고 통제될 수 있다. 실제로 감정 통제를 위해 명상과 같은 훌륭한 방법들이 많고, 항상 감정과 조우하고 있는 우리는 이러한 방법을 배워야 한다. 이 말인 즉, 우리는 우리의 감정을 우리의 미래를 위해 이용할 수 있다는 의미이다. 이러한 사실을 인지하였는지 모르지만, 비틀즈 역시 명상을 배우기 위해 인도를 여행한 적이 있다. 

고독은 위대함의 밑바탕이다. 우리 모두는 위대해질 수 있는 그릇을 갖추고 있다. 그 감정이 우리를 엄습할 때, 우리는 오히려 이 감정을 가득 움켜쥐어야 한다. 우리가 성취하고 싶은 일이 있다면 고독은 우리를 행동으로 이끌 것이고, 사랑하는 이들에게 좋은 사람이 되고 싶다면 고독은 상대에게 진심 가득한 친절을 베풀게 할 것이다. 그러니 비관적인 판단으로 고독을 물리치지 않고, 그 감정과 함께 원하는 바를 성취하자.
    `
    },
    {
        articleType: 'books',
        postId: 'Post1',    
        title: '허무주의에 대한 오해',
        cover: '/images/books/차라투스트라표지.jpg',
        contents: `

##  ‘차라투스트라는 이렇게 말했다’를 읽고

근로를 하는 누구라도 회사를 마치고 집에 돌아와 허무와 무기력감을 느껴봤을 것이다. 내가 속한 회사에 긍지를 느끼며 긍정적이고 낙관적인 마음과 태도로 항상 다닐 수 있다면 좋겠지만, 그럴 수 있는 직장인은 아마 많지 않을 것이다.

이러한 허무와 무기력감을 달래는 방법은 사람마다 다를 것이다. 누군가는 퇴근 후 집에서 드라마나 영화를 보거나 오락을 즐기며 휴식을 취하며 기력을 회복할 것이고, 또 누군가는 더 나은 직장으로의 이직이나 진로 변경을 위해 공부를 하거나 책을 읽는 사람들도 있을 것이다. 그 방법이 무엇이건 간에 허무를 느끼고 그것을 달래기 위해 어떤 행동을 취한다면, 이런 사람들은 허무주의자라고 할 수 있다. 이런 관점에서 본다면 우리 사회에 허무주의자는 의외로 상당히 많다.

그러나 단순히 허무를 인지하기만 한 상태에서는 ‘수동적 허무주의’에 머무를 뿐이다. 더 나은 삶을 살기 위해서는 우리는 이 허무를 극복해야할 필요가 있으며, 이를 위해서는 새로운 가치 정립을 위한 적극적인 생각과 행동을 하는 ‘능동적 허무주의자’가 되어야 한다. 

니체는 기존의 질서와 가치가 인간의 성장과 발전을 가로막고 있기 때문에, 시대가 강요하는 질서와 가치는 소용없다는 의도에서 허무주의를 주장하였다. 그는 기존의 질서와 가치에 대해 끊임없이 의심하며 가치 판단을 스스로 하고, 틀린 가치라면 주저 없이 버리고 새로운 질서와 가치를 정립해야 한다고 주장하였다. 이 과정에서 그동안 부정적으로 인식되던 가치가 최고의 가치가 될 수 있고, 반대로 긍정적으로 인식되는 가치가 최악이 되어버리는 가치 전도는 필연적이며, 이러한 가치 판단을 주체적으로 할 수 있는 인간이 되어야 한다는 사상을 전개하였다. 결국 니체는 인간은 스스로 가치를 판단하여 시대가 강요하는 불필요한 질서와 가치인 ‘허무’를 극복한 ‘초인’이 되어야 한다고 주장하였다.

이처럼 우리가 통상적으로 사용하는 것처럼 허무주의는 전적으로 부정적인 의미만을 가지고 있지는 않으며, 허무를 대하는 우리의 태도에 따라서 좋은 의도로도 사용될 수 있다. 일반적으로 사회적으로 사용되는 허무주의는 사실상 수동적 허무주의와 가깝다.

허무와 무기력감이 심화되면 조직이나 사회 혹은 특정 개인에 대한 비관으로 이어져 염세주의(pessimism)로 발전한다. 근래 온라인에서 특정 대상에 대한 맹목적인 비난으로 사회적 물의를 일으키는 집단들이 극단적인 염세주의에 비롯하고 있다는 점을 볼 때, 허무를 원천적으로 해소하지 않는 수동적 허무주의자의 증가는 결코 사회적으로 용인되어서는 안 되는 현상이다.

초·중·고등학교와 대학교를 합쳐 십 수 년 동안 우리는 성실과 인내, 조직에 대한 헌신과 희생과 같은 가치를 오랫동안 지속적으로 교육 받으며 성장하였다. 이런 오랜 기간 동안의 ‘세뇌’ 덕분에 우리는 매일 부지런히 출근하여 성실하고 인내하며 업무를 보고, 헌신하고 희생하는 차원에서 쉴 새 없는 야근을 당연시 하게 되었다. 이런 우리의 긍지 높은(?) 희생과 헌신의 결과로 우리나라는 OECD 국가 중 근로시간이 가장 길고, 자살률이 가장 높고, 행복지수가 아주 낮은 경이로운(?) 국가가 되었다. 그러나 이런 명백한 수치가 있음에도 불구하고 우리나라의 교육은 여전히 근대식이다. 창조와 혁신, 변화라는 가치를 강조하면서도 교육은 아직도 일제강점기의 전체주의 국가였던 일본에서 행해진 방식이기 때문에 현재에도 우리는 근대적인 가치관을 버리지 못하고 있다.

학교를 떠나 사회에 나오면 아무도 가르침을 주지 않는다. 배움을 찾고, 판단하고, 결과에 대한 책임은 오롯이 나의 몫이다. 그러나 스스로 능동적으로 무엇인가 해본 적 없는 근대식 교육을 받은 많은 사람들은 이런 것들이 굉장히 낯설기만 하다. 그래서 새로운 것을 해보려니 두렵고, 희생과 헌신이 최고의 가치라고 세뇌를 당했으니 회사에 지장을 줄까 겁이 난다. 그래서 많은 이들이 상사의 눈치를 살피고 퇴근하여 오늘도 TV나 오락기 앞에서 시간을 보내며 심신을 달래며 마냥 ‘내일’만을 준비할 뿐이다. 이렇게 우리는 삶의 주체가 되지 못하고 오늘의 허무를 수동적으로 일관하며 성실한 사회의 일꾼으로 매일 똑같은 일상을 쳇바퀴처럼 돌며 하루를 마감한다. 능동적으로 허무를 대할 때 조직이 장기적으로 더 큰 이득을 얻을 수 있다는 가능성은 전혀 염두에 두지 않고 내일만을 생각할 뿐이다.

소크라테스가 말했듯이 우리는 우리가 모르고 있다는 것을 알아야 한다. ‘교육’이라는 이름으로 자행된 ‘세뇌’를 깨닫고 스스로 가치 판단을 할 수 있는 인간으로 거듭나야 하고, 스스로 자신이 원하는 가치를 알아내야 한다. 그러니 더 이상 미디어가 흘리는 편견 가득한 영상이나 오락으로 우리의 의식을 꺼뜨리지 말고, 우리의 내재적 세계를 넓힐 수 있는 활동에 힘쓰자. 그리고 외부 세계와의 충돌을 두려워하지 말고 용기 있게 부딪히자. 조금씩 천천히, 우리가 원하는 인생을 계획하고 실행하여 허무를 물리치고 우리의 자유를 찾자. 
    `
    },    
    {
        articleType: 'books',
        postId: "Post2",
        title: '요리 본능을 읽고',
        cover: '/images/books/요리본능표지.jpg',
        contents: `    
tvN 드라마 '철인왕후'를 보다 요리를 해보자는 생각에 요리책을 고르다 이 책을 알게 되었는데, 요리 방법에 관한 내용인 줄 알았는데 알고 보니 인류의 진화 과정을 요리와 관련하여 풀어쓴, 굉장히 학문적인 책이었다. 책이 배송되고 뜬금없는  목차에 잠깐 당황하고 첫 페이지를 읽었더니, 왠 걸? 내용이 상당히 흥미진진했다.  화식을 시작하면서 인류가 진화 과정에서 얻을 수 있었던 이득에 대한 주장과 증명에 대한 내용이 주를 이루고 있는데, 그 설명들이 하나같이 깨알같다. 

그 동안 '날 것'으로 먹는 선식에 대해 약간이나마 로망(?)을 품고 있었는데, 이 책을 읽으면서 그 로망이 산산이 부숴졌다. 불을 이용해 음식을 익히면 파괴되는 영양소가 있기는 하지만, 적은 에너지로 영양분의 흡수를 효율적으로 할 수 있기 때문에, 소화 과정에 많은 에너지를 들여야 하는 선식 보다 인류의 진화에 가져다 준 이점이 많으며, 이에 대해 사람과 동물들의 다양한 실제 사례를 보여주면서 주장에 대한 근거를 들고 있다. 그 중에서 외과의사 버몬트와 청년 마르탱의 유명한 일화가 가장 인상 깊었는데, 지금은 윤리 문제로 누구도 따라할 수 없는 임상 시험을 통해 소화 과정을 적나라하게 관찰한 대표적인 사례로 여겨지고 있다. 버몬트는 내장에서 실제로 일어나는 소화 과정을 관찰하여 익힌 음식이 그렇지 않은 음식 보다 소화가 훨씬 빨리 된다는 결과를 보였다고 한다.

이 쯤 읽고 나니 왜 선식을 하는 사람들의 건강에 문제가 발생할 수도 있겠다는 점을 인정하게 되었다. 당연히 건강을 위한 선식이니 선식을 하지 않는 사람 보다 건강해야 하는 게 타당한 것 같은데, 그렇지 않은 사례를 보면 항상 의아했었다. 물론 다양한 원인들이 있겠지만 무턱대고 선식을 찬양해서는 안 되며, 오히려 선식을 하면 소화 과정에 많은 에너지가 소모된다고 하니, 책을 보다 보니 어느새 선식에 대한 부정적인 관점이 생겨 있었다.

근데 이거 오해하면 안 된다. 고기가 항상 옳다는 게 아닌데, 이 책을 보고 나니 고기 먹을 때의 그 일말의  죄책감이 사라져 버렸다.. 고기가 대표적인 화식 요리 중 하나이다 보니 사례로 육식과 관련된 내용이 꽤 많은데, 계속 보고 있으면 화식이 아니라 구워 먹는 '고기'는 항상 옳다는 이상한 생각을 하게 되더란 말씀. 내 맘대로 해석해서는 고기를 벌써 꽤 많이 먹었으면서도, '나는 지금 인류 진화에 헌신하고 있는 중이야'라면서 정신 승리하고서는 계속 먹게 되는 이상한 결론(??)을 짓고 말았다.
        `
    }
]